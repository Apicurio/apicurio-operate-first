apiVersion: v1
data:
  envoy.yaml: |
    # The administration endpoint uses a Unix socket instead of TCP in order
    # to avoid exposing it outside of the pod. Requests for metrics and
    # probes will go via an HTTP listener that only accepts requests for the
    # /metrics and /ready paths.
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901

    static_resources:

      clusters:

      # This backend is used to send metrics and probes requests to the
      # administration endpoint.
      - name: admin
        connect_timeout: 1s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 0.0.0.0
                    port_value: 9901

      # This cluster is used to send requests to the backend.
      - name: backend
        connect_timeout: 2s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: backend
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8080

      # This cluster is used to send request to the rate limiting service.
      - name: limiter
        connect_timeout: 1s
        type: STRICT_DNS
        #consider setting dns_refresh_rate
        # dns_refresh_rate: 30000ms #im not sure if it's configured like this
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: limiter
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    #HEEEY workaround here because of nameSuffix
                    address: limitador-mt
                    port_value: 8081

      listeners:

      # This listener is used to accept /metrics and /ready requests.
      # Everything else will be rejected.
      - name: admin
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 9000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: admin
              route_config:
                name: admin
                virtual_hosts:
                - name: admin
                  domains:
                  - "*"
                  routes:
                  - name: ready
                    match:
                      path: /ready
                    route:
                      cluster: admin
                  - name: metrics
                    match:
                      path: /metrics
                    route:
                      cluster: admin
                      prefix_rewrite: /stats/prometheus
              http_filters:
              - name: envoy.filters.http.router

      # This listener is used to accept inbound API requests.
      - name: ingress
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 38080
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
              stat_prefix: ingress
              route_config:
                name: backend
                virtual_hosts:
                - name: all
                  domains:
                  - "*"
                  routes:

                  # Apply rate limit to each tenant
                  - name: apicurio-tenants
                    match:
                      safe_regex:
                        regex: "\/t\/.+\/.*"
                        google_re2: {}
                    route:
                      cluster: backend
                      rate_limits:
                      # normal plan rate limit
                      - actions:
                        - generic_key:
                            descriptor_key: component
                            descriptor_value: srs_apicurio_registry
                        - request_headers:
                            descriptor_key: tenant_id
                            header_name: X-Registry-Tenant-Id

                  # This is an example of how to define a rate limit for a
                  # specific path.
                  # - name: my_path
                  #   match:
                  #     path: /my_path
                  #   route:
                  #     cluster: backend
                  #     rate_limits:
                  #     - actions:
                  #       - generic_key:
                  #           descriptor_key: example_descriptor_key
                  #           descriptor_value: example_descriptor_value

                  # Everything else not matching one of the rules above goes
                  # it's rate limited by a local rate limit to avoid over loading the ratelimit service
                  - name: default
                    match:
                      prefix: /
                    route:
                      cluster: backend
                    typed_per_filter_config:
                      envoy.filters.http.local_ratelimit:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                        stat_prefix: http_local_rate_limiter
                        token_bucket:
                          max_tokens: 60
                          tokens_per_fill: 60
                          fill_interval: 30s
                        filter_enabled:
                          runtime_key: local_rate_limit_enabled
                          default_value:
                            numerator: 100
                            denominator: HUNDRED
                        filter_enforced:
                          runtime_key: local_rate_limit_enforced
                          default_value:
                            numerator: 100
                            denominator: HUNDRED

              http_filters:

              #custom lua filter to parse the path and set the tenantId as a header
              #example from here https://github.com/ibm-cloud-architecture/tutorial-istio-envoy-lua-filters/blob/master/example-1-query/envoy.yaml
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      local path = request_handle:headers():get(":path")
                      local delimiter = "/"
                      local tid_delimiter = false
                      local index = 0
                      for item in (path..delimiter):gmatch("(.-)"..delimiter) do
                        if index == 0 then
                        elseif index == 1 and item == "t" then
                          tid_delimiter = true
                        elseif index == 2 and tid_delimiter and item ~= "" then
                          request_handle:logDebug("Extracted tenantId " .. item)
                          request_handle:headers():add("X-Registry-Tenant-Id", item)
                          return
                        else
                          return
                        end
                        index = index + 1
                      end
                    end

              # config for main safety local rate limit
              - name: envoy.filters.http.local_ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                  stat_prefix: http_local_rate_limiter

              # This is needed to enable the rate limiter:
              - name: envoy.filters.http.ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                  domain: stage:apicurio-registry
                  failure_mode_deny: false
                  timeout: 2s
                  rate_limit_service:
                    grpc_service:
                      envoy_grpc:
                        cluster_name: limiter
                    transport_api_version: V3

              # This is mandatory in order to have the HTTP routes above.
              - name: envoy.filters.http.router

              # We need this in order to generate JSON responses according to
              # our API guidelines, otherwise Envoy will generate plain text
              # responses.
              local_reply_config:
                mappers:
                - filter:
                    status_code_filter:
                      comparison:
                        op: EQ
                        value:
                          default_value: 429
                          runtime_key: none
                  body_format_override:
                    json_format:
                      kind: "Error"
                      id: "429"
                      code: "429"
                      reason: "Too Many Requests"
kind: ConfigMap
metadata:
  labels:
    app: apicurio
  name: apicurio-envoy-config-mt
---
apiVersion: v1
data:
  create-databases.sh: |
    #!/bin/bash

    set -e
    set -u

    function create_user_and_database() {
      local database=$1
      echo "  Creating user and database '$database'"
      psql -v ON_ERROR_STOP=1 --username postgres <<-EOSQL
          CREATE USER $database WITH PASSWORD '$MULTIPLE_DATABASES_PASSWORD';
          CREATE DATABASE $database;
          GRANT ALL PRIVILEGES ON DATABASE $database TO $database;
    EOSQL
    }

    function databaseExists() {
      local database=$1
      DBLIST=$(psql -v ON_ERROR_STOP=1 --username postgres -c 'SELECT datname FROM pg_database')
      echo $DBLIST | grep $database
    }

    if [ -n "$CREATE_MULTIPLE_DATABASES" ]; then
      echo "Multiple database creation requested: $CREATE_MULTIPLE_DATABASES"
      for db in $(echo $CREATE_MULTIPLE_DATABASES | tr ',' ' '); do
        if databaseExists $db ; then
          echo "Skipping database '$db' creation"
        else
          create_user_and_database $db
        fi
      done
      echo "Multiple databases created"
    fi
kind: ConfigMap
metadata:
  name: backstage-db-init-script-configmap
---
apiVersion: v1
data:
  create-databases.sh: |
    #!/bin/bash

    set -e
    set -u

    function create_user_and_database() {
      local database=$1
      echo "  Creating user and database '$database'"
      psql -v ON_ERROR_STOP=1 --username postgres <<-EOSQL
          CREATE USER $database WITH PASSWORD '$MULTIPLE_DATABASES_PASSWORD';
          CREATE DATABASE $database;
          GRANT ALL PRIVILEGES ON DATABASE $database TO $database;
    EOSQL
    }

    function databaseExists() {
      local database=$1
      DBLIST=$(psql -v ON_ERROR_STOP=1 --username postgres -c 'SELECT datname FROM pg_database')
      echo $DBLIST | grep $database
    }

    if [ -n "$CREATE_MULTIPLE_DATABASES" ]; then
      echo "Multiple database creation requested: $CREATE_MULTIPLE_DATABASES"
      for db in $(echo $CREATE_MULTIPLE_DATABASES | tr ',' ' '); do
        if databaseExists $db ; then
          echo "Skipping database '$db' creation"
        else
          create_user_and_database $db
        fi
      done
      echo "Multiple databases created"
    fi
kind: ConfigMap
metadata:
  name: db-init-script-configmap-mt
---
apiVersion: v1
data:
  limits.yaml: |-
    ---

    # Limit apicurio-registry to max 60 reqs per 30 secs for each tenant
    - namespace: stage:apicurio-registry
      max_value: 60
      seconds: 30
      conditions:
      - component == srs_apicurio_registry
      variables:
      - component
      - tenant_id
kind: ConfigMap
metadata:
  labels:
    app: limitador
  name: limitador-config-mt
---
apiVersion: v1
data:
  pg-database-name: apicurio
  pg-ds-url: jdbc:postgresql://apicurio-registry-postgresql-mt:5432/apicurio
  pg-pwd: pass
  pg-user: apicurio
kind: ConfigMap
metadata:
  name: postgresql-apicurio-configmap-mt
---
apiVersion: v1
data:
  pg-database-name: fleetmanager
  pg-ds-url: jdbc:postgresql://apicurio-registry-postgresql-mt:5432/fleetmanager
  pg-pwd: pass
  pg-user: fleetmanager
kind: ConfigMap
metadata:
  name: postgresql-fleetmanager-configmap-mt
---
apiVersion: v1
data:
  pg-database-name: tenantmanager
  pg-ds-url: jdbc:postgresql://apicurio-registry-postgresql-mt:5432/tenantmanager
  pg-pwd: pass
  pg-user: tenantmanager
kind: ConfigMap
metadata:
  name: postgresql-tenantmanager-configmap-mt
---
apiVersion: v1
data:
  registry-deployments.yaml: |-
    deployments:
      - name: default
        # Route to registry
        registryDeploymentUrl: https://apicurio-registry-mt-apicurio-apicurio-registry.apps.smaug.na.operate-first.cloud/
        # Path to tenant manager service
        tenantManagerUrl: http://tenant-manager-mt:8585
kind: ConfigMap
metadata:
  labels:
    app: fleet-manager
  name: registry-deployments-config-file-mt
---
apiVersion: v1
data:
  quota-plans.yaml: |-
    reconcile: true # Enable this if you make changes to the plans configuration
    plans:
      - name: default
        resources:
          - type: MAX_TOTAL_SCHEMAS_COUNT
            limit: 1000
          - type: MAX_SCHEMA_SIZE_BYTES
            limit: 1000000 # 1Mb
          - type: MAX_ARTIFACTS_COUNT
            limit: -1
          - type: MAX_VERSIONS_PER_ARTIFACT_COUNT
            limit: -1
          - type: MAX_ARTIFACT_PROPERTIES_COUNT
            limit: 50
          - type: MAX_PROPERTY_KEY_SIZE_BYTES
            limit: 256
          - type: MAX_PROPERTY_VALUE_SIZE_BYTES
            limit: 1024
          - type: MAX_ARTIFACT_LABELS_COUNT
            limit: 50
          - type: MAX_LABEL_SIZE_BYTES
            limit: 256
          - type: MAX_ARTIFACT_NAME_LENGTH_CHARS
            limit: -1
          - type: MAX_ARTIFACT_DESCRIPTION_LENGTH_CHARS
            limit: -1
          - type: MAX_REQUESTS_PER_SECOND_COUNT
            limit: 10
kind: ConfigMap
metadata:
  labels:
    app: fleet-manager
  name: registry-quota-plans-config-mt
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: apicurio-envoy
  name: apicurio-envoy-mt
spec:
  ports:
  - name: envoy-http
    port: 80
    targetPort: envoy-http
  selector:
    component: apicurio-registry
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: apicurio-registry
    template: apicurio-registry
  name: apicurio-registry-mt
spec:
  ports:
  - name: web
    port: 8080
    protocol: TCP
    targetPort: web
  selector:
    component: apicurio-registry
  sessionAffinity: None
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: apicurio-registry-mt-ui
  name: apicurio-registry-mt-ui-mt
spec:
  ports:
  - name: 8080-http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    component: apicurio-registry-mt-ui
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: apicurio-registry-postgresql
  name: apicurio-registry-postgresql-mt
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: apicurio-registry-postgresql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: backstage
    template: backstage
  name: backstage
spec:
  ports:
  - name: app
    port: 7007
    protocol: TCP
    targetPort: app
  selector:
    app: backstage
  sessionAffinity: None
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: backstage-postgresql
  name: backstage-postgresql
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: backstage-postgresql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: fleet-manager
  name: fleet-manager-mt
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    component: fleet-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: limitador
  name: limitador-mt
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  - name: grpc
    port: 8081
    protocol: TCP
    targetPort: grpc
  selector:
    app: limitador
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: apicurio-registry
    template: tenant-manager
  name: tenant-manager-mt
spec:
  ports:
  - port: 8585
    protocol: TCP
    targetPort: 8585
  selector:
    component: apicurio-registry
  sessionAffinity: None
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    name: apicurio-registry-postgresql
  name: apicurio-registry-postgresql-mt
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    name: backstage-postgresql
  name: backstage-postgresql
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: apicurio-registry-postgresql
  name: apicurio-registry-postgresql-mt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apicurio-registry-postgresql
  template:
    metadata:
      labels:
        app: apicurio-registry-postgresql
    spec:
      containers:
      - env:
        - name: POSTGRESQL_ADMIN_PASSWORD
          value: admin1234
        - name: CREATE_MULTIPLE_DATABASES
          value: apicurio,tenantmanager,fleetmanager
        - name: MULTIPLE_DATABASES_PASSWORD
          value: pass
        image: quay.io/centos7/postgresql-12-centos7:1
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 20
          tcpSocket:
            port: 5432
        name: apicurio-registry-postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 5432
        resources:
          limits:
            cpu: 1000m
            memory: 1200Mi
          requests:
            cpu: 400m
            memory: 500Mi
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: apicurio-registry-postgresql
        - mountPath: /opt/app-root/src/postgresql-start/
          name: create-databases-script
      volumes:
      - name: apicurio-registry-postgresql
        persistentVolumeClaim:
          claimName: apicurio-registry-postgresql-mt
      - configMap:
          name: db-init-script-configmap-mt
        name: create-databases-script
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: limitador
  name: limitador-mt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: limitador
  template:
    metadata:
      labels:
        app: limitador
    spec:
      containers:
      - env:
        - name: RUST_LOG
          value: debug
        - name: LIMITS_FILE
          value: /home/limitador/limits.yaml
        image: quay.io/3scale/limitador:0.4.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        name: limitador
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: grpc
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 600m
            memory: 1000Mi
          requests:
            cpu: 200m
            memory: 500Mi
        volumeMounts:
        - mountPath: /home/limitador/limits.yaml
          name: runtime-config
          subPath: limits.yaml
      volumes:
      - configMap:
          name: limitador-config-mt
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: backstage-postgresql
  name: backstage-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage-postgresql
  serviceName: backstage
  template:
    metadata:
      labels:
        app: backstage-postgresql
    spec:
      containers:
      - env:
        - name: POSTGRESQL_ADMIN_PASSWORD
          value: admin1234
        - name: CREATE_MULTIPLE_DATABASES
          value: backstage
        - name: MULTIPLE_DATABASES_PASSWORD
          value: pass
        image: quay.io/centos7/postgresql-12-centos7:1
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 20
          tcpSocket:
            port: 5432
        name: backstage-postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 5432
        resources:
          limits:
            cpu: 1000m
            memory: 1200Mi
          requests:
            cpu: 400m
            memory: 500Mi
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: backstage-postgresql
        - mountPath: /opt/app-root/src/postgresql-start/
          name: create-databases-script
      volumes:
      - name: backstage-postgresql
        persistentVolumeClaim:
          claimName: backstage-postgresql
      - configMap:
          name: backstage-db-init-script-configmap
        name: create-databases-script
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: apicurio-registry
    component: apicurio-registry
  name: apicurio-registry-mt
spec:
  replicas: 1
  selector:
    component: apicurio-registry
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      post:
        execNewPod:
          command:
          - /bin/sh
          - -c
          - |-
            echo '{"text":"
            *Operate First Deployment Alert - Registry*

            ' > data.json && cat /work/meta/git.properties >> data.json && echo '"}' >> data.json && curl -i $GOOGLE_CHAT_WEBHOOK -X POST -H 'Content-Type: application/json' --data-binary '@data.json'
          containerName: apicurio-registry
          env:
          - name: GOOGLE_CHAT_WEBHOOK
            valueFrom:
              secretKeyRef:
                key: webhook-url
                name: gchat-webhook
        failurePolicy: Ignore
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        component: apicurio-registry
      name: apicurio-registry
    spec:
      containers:
      - env:
        - name: REGISTRY_LOG_LEVEL
          value: DEBUG
        - name: LOG_LEVEL
          value: INFO
        - name: QUARKUS_PROFILE
          value: prod
        - name: REGISTRY_CONFIG_CACHE_ENABLED
          value: "true"
        - name: REGISTRY_ENABLE_MULTITENANCY
          value: "true"
        - name: REGISTRY_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              key: pg-ds-url
              name: postgresql-apicurio-configmap-mt
        - name: REGISTRY_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              key: pg-user
              name: postgresql-apicurio-configmap-mt
        - name: REGISTRY_DATASOURCE_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: pg-pwd
              name: postgresql-apicurio-configmap-mt
        - name: AUTH_ENABLED
          value: "true"
        - name: KEYCLOAK_URL
          value: https://auth.apicur.io/auth
        - name: KEYCLOAK_REALM
          value: operate-first-apicurio
        - name: KEYCLOAK_API_CLIENT_ID
          value: sr-api
        - name: ORGANIZATION_ID_CLAIM
          value: organization_id
        - name: TENANT_MANAGER_AUTH_ENABLED
          value: "true"
        - name: TENANT_MANAGER_AUTH_URL
          value: https://auth.apicur.io/auth
        - name: TENANT_MANAGER_REALM
          value: operate-first-apicurio
        - name: TENANT_MANAGER_CLIENT_ID
          value: sr-tenant-manager
        - name: TENANT_MANAGER_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client_secret
              name: tenant-manager-auth-secret
        - name: REGISTRY_AUTH_RBAC_ENABLED
          value: "false"
        - name: REGISTRY_DOWNLOAD_HREF_TTL_DYNAMIC_ALLOW
          value: "false"
        - name: REGISTRY_AUTH_OWNER_ONLY_AUTHORIZATION_LIMIT_GROUP_ACCESS_DYNAMIC_ALLOW
          value: "true"
        - name: REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED_DYNAMIC_ALLOW
          value: "true"
        - name: REGISTRY_UI_FEATURES_READONLY_DYNAMIC_ALLOW
          value: "false"
        image: apicurio-registry:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: apicurio-registry
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 1200Mi
          requests:
            cpu: 500m
            memory: 600Mi
        terminationMessagePath: /dev/termination-log
      - env:
        - name: DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              key: pg-ds-url
              name: postgresql-tenantmanager-configmap-mt
        - name: DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              key: pg-user
              name: postgresql-tenantmanager-configmap-mt
        - name: DATASOURCE_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: pg-pwd
              name: postgresql-tenantmanager-configmap-mt
        - name: REGISTRY_ROUTE_URL
          value: http://localhost:8080
        - name: QUARKUS_HTTP_PORT
          value: "8585"
        - name: TENANT_MANAGER_LOG_LEVEL
          value: DEBUG
        - name: AUTH_ENABLED
          value: "true"
        - name: KEYCLOAK_URL
          value: https://auth.apicur.io/auth
        - name: KEYCLOAK_REALM
          value: operate-first-apicurio
        - name: KEYCLOAK_API_CLIENT_ID
          value: sr-tenant-manager
        image: tenant-manager:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /q/health/live
            port: 8585
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: tenant-manager
        ports:
        - containerPort: 8585
          protocol: TCP
        readinessProbe:
          failureThreshold: 8
          httpGet:
            path: /q/health/ready
            port: 8585
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 1000m
            memory: 1200Mi
          requests:
            cpu: 500m
            memory: 600Mi
        terminationMessagePath: /dev/termination-log
      - args:
        - -c
        - /etc/envoy.yaml
        - --service-node
        - apicurio
        - --service-cluster
        - apicurio
        - -l
        - debug
        command:
        - envoy
        image: envoyproxy/envoy:v1.18.3
        name: envoy
        ports:
        - containerPort: 38080
          name: envoy-http
          protocol: TCP
        - containerPort: 9901
          name: envoy-metrics
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 300Mi
        volumeMounts:
        - mountPath: /etc/envoy.yaml
          name: apicurio-envoy-config
          subPath: envoy.yaml
      volumes:
      - configMap:
          name: apicurio-envoy-config-mt
        name: apicurio-envoy-config
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - apicurio-registry
      from:
        kind: ImageStreamTag
        name: apicurio-registry-mt:latest
    type: ImageChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - tenant-manager
      from:
        kind: ImageStreamTag
        name: tenant-manager-mt:latest
    type: ImageChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: apicurio-registry-mt-ui
    component: apicurio-registry-mt-ui
  name: apicurio-registry-mt-ui-mt
spec:
  replicas: 1
  selector:
    component: apicurio-registry-mt-ui
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      post:
        execNewPod:
          command:
          - /bin/sh
          - -c
          - |-
            curl -i $GOOGLE_CHAT_WEBHOOK -X POST -H 'Content-Type: application/json' --data '{"text":"
            *Operate First Deployment Alert - Registry UI mt*

            "}'
          containerName: apicurio-registry-mt-ui
          env:
          - name: GOOGLE_CHAT_WEBHOOK
            valueFrom:
              secretKeyRef:
                key: webhook-url
                name: gchat-webhook
        failurePolicy: Ignore
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        component: apicurio-registry-mt-ui
      name: apicurio-registry-mt-ui
    spec:
      containers:
      - env:
        - name: REGISTRY_UI_URL
          value: https://apicurio-registry-mt-ui-mt-apicurio-apicurio-registry.apps.smaug.na.operate-first.cloud/modules/registry
        - name: SRS_API_URL
          value: https://fleet-manager-mt-apicurio-apicurio-registry.apps.smaug.na.operate-first.cloud
        - name: AUTH_ENABLED
          value: "true"
        - name: KEYCLOAK_REALM
          value: operate-first-apicurio
        - name: KEYCLOAK_URL
          value: https://auth.apicur.io/auth
        - name: KEYCLOAK_SSL_REQUIRED
          value: external
        - name: KEYCLOAK_RESOURCE
          value: sr-ui
        - name: NAV_ENABLED
          value: "true"
        - name: NAV_DESIGNER_URL
          value: https://api-designer-poc.apps.smaug.na.operate-first.cloud/
        image: apicurio-registry-mt-ui:latest
        imagePullPolicy: Always
        name: apicurio-registry-mt-ui
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: 600m
            memory: 875Mi
          requests:
            cpu: 200m
            memory: 875Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - apicurio-registry-mt-ui
      from:
        kind: ImageStreamTag
        name: apicurio-registry-mt-ui-mt:latest
    type: ImageChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: backstage
  name: backstage
spec:
  replicas: 1
  selector:
    app: backstage
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: backstage
      name: backstage
    spec:
      containers:
      - env:
        - name: POSTGRES_HOST
          value: backstage-postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_USER
          value: backstage
        - name: POSTGRES_PASSWORD
          value: pass
        - name: APP_CONFIG_backend_baseUrl
          value: https://backstage-apicurio-apicurio-registry.apps.smaug.na.operate-first.cloud
        - name: APP_CONFIG_app_baseUrl
          value: https://backstage-apicurio-apicurio-registry.apps.smaug.na.operate-first.cloud
        image: backstage:latest
        imagePullPolicy: Always
        name: backstage
        ports:
        - containerPort: 7007
          name: app
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 500m
            memory: 500Mi
        terminationMessagePath: /dev/termination-log
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - backstage
      from:
        kind: ImageStreamTag
        name: backstage:latest
    type: ImageChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: fleet-manager
    component: fleet-manager
  name: fleet-manager-mt
spec:
  replicas: 1
  selector:
    component: fleet-manager
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      post:
        execNewPod:
          command:
          - /bin/sh
          - -c
          - |-
            curl -i $GOOGLE_CHAT_WEBHOOK -X POST -H 'Content-Type: application/json' --data '{"text":"
            *Operate First Deployment Alert - Fleet Manager*

            "}'
          containerName: fleet-manager
          env:
          - name: GOOGLE_CHAT_WEBHOOK
            valueFrom:
              secretKeyRef:
                key: webhook-url
                name: gchat-webhook
        failurePolicy: Ignore
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        component: fleet-manager
      name: fleet-manager
    spec:
      containers:
      - env:
        - name: SERVICE_API_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              key: pg-ds-url
              name: postgresql-fleetmanager-configmap-mt
        - name: SERVICE_API_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              key: pg-user
              name: postgresql-fleetmanager-configmap-mt
        - name: SERVICE_API_DATASOURCE_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: pg-pwd
              name: postgresql-fleetmanager-configmap-mt
        - name: REGISTRY_BROWSER_URL
          value: https://apicurio-registry-mt-ui-mt-apicurio-apicurio-registry.apps.smaug.na.operate-first.cloud/instances/TENANT_ID
        - name: REGISTRY_QUOTA_PLANS_CONFIG_FILE
          value: /config/quota-plans.yaml
        - name: REGISTRY_DEPLOYMENTS_CONFIG_FILE
          value: /config/registry-deployments.yaml
        - name: AUTH_ENABLED
          value: "true"
        - name: KEYCLOAK_URL
          value: https://auth.apicur.io/auth
        - name: KEYCLOAK_REALM
          value: operate-first-apicurio
        - name: KEYCLOAK_API_CLIENT_ID
          value: sr-fleet-manager
        - name: TENANT_MANAGER_AUTH_ENABLED
          value: "true"
        - name: TENANT_MANAGER_AUTH_SERVER_URL
          value: https://auth.apicur.io/auth
        - name: TENANT_MANAGER_AUTH_SERVER_REALM
          value: operate-first-apicurio
        - name: TENANT_MANAGER_AUTH_CLIENT_ID
          value: sr-tenant-manager
        - name: TENANT_MANAGER_AUTH_SECRET
          valueFrom:
            secretKeyRef:
              key: client_secret
              name: tenant-manager-auth-secret
        - name: ORGANIZATION_ID_CLAIM
          value: organization_id
        - name: FM_AMS_LOCAL_MAX_INSTANCES_PER_ORG_ID
          value: "2"
        image: fleet-manager:latest
        imagePullPolicy: Always
        name: fleet-manager
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        resources:
          limits:
            cpu: 1000m
            memory: 1200Mi
          requests:
            cpu: 500m
            memory: 600Mi
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /config/registry-deployments.yaml
          name: registry-deployments-config-file
          subPath: registry-deployments.yaml
        - mountPath: /config/quota-plans.yaml
          name: registry-quota-plans-config
          subPath: quota-plans.yaml
      volumes:
      - configMap:
          name: registry-deployments-config-file
        name: registry-deployments-config-file
      - configMap:
          name: registry-quota-plans-config-mt
        name: registry-quota-plans-config
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - fleet-manager
      from:
        kind: ImageStreamTag
        name: fleet-manager-mt:latest
    type: ImageChange
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: auth-ext-secret-mt
spec:
  dataFrom:
  - extract:
      key: moc/smaug/apicurio-apicurio-registry/sso
  secretStoreRef:
    kind: SecretStore
    name: opf-vault-store
  target:
    name: tenant-manager-auth-secret
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: e2e-registry-ext-secret
spec:
  dataFrom:
  - extract:
      key: moc/smaug/apicurio-apicurio-registry/e2e-registry-secret
  secretStoreRef:
    kind: SecretStore
    name: opf-vault-store
  target:
    name: e2e-registry-secret
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gchat-webhook-ext-secret-mt
spec:
  dataFrom:
  - extract:
      key: moc/smaug/apicurio-apicurio-registry/gchat-webhook
  secretStoreRef:
    kind: SecretStore
    name: opf-vault-store
  target:
    name: gchat-webhook
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: apicurio-registry
    component: registry
  name: apicurio-registry-mt
spec:
  tags:
  - from:
      kind: DockerImage
      name: quay.io/apicurio/apicurio-registry-sql-native:latest-snapshot
    importPolicy:
      scheduled: true
    name: latest
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: apicurio-registry-mt-ui
    component: apicurio-registry-mt-ui
  name: apicurio-registry-mt-ui-mt
spec:
  tags:
  - from:
      kind: DockerImage
      name: quay.io/apicurio/apicurio-registry-mt-ui:latest
    importPolicy:
      scheduled: true
    name: latest
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: backstage
  name: backstage
spec:
  tags:
  - from:
      kind: DockerImage
      name: quay.io/aperuffo/backstage-demo:latest
    importPolicy:
      scheduled: true
    name: latest
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: fleet-manager
    component: registry
  name: fleet-manager-mt
spec:
  tags:
  - from:
      kind: DockerImage
      name: quay.io/apicurio/apicurio-registry-fleet-manager:latest-snapshot
    importPolicy:
      scheduled: true
    name: latest
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: tenant-manager
    component: registry
  name: tenant-manager-mt
spec:
  tags:
  - from:
      kind: DockerImage
      name: quay.io/apicurio/apicurio-tenant-manager-api:latest-snapshot
    importPolicy:
      scheduled: true
    name: latest
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: apicurio-registry
    template: apicurio-registry
  name: apicurio-envoy-mt
spec:
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: apicurio-envoy-mt
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    kubernetes.io/tls-acme: "true"
  labels:
    app: apicurio-registry
    template: apicurio-registry
  name: apicurio-registry-mt
spec:
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: apicurio-registry-mt
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    kubernetes.io/tls-acme: "true"
  labels:
    app: apicurio-registry-mt-ui
    template: apicurio-registry-mt-ui
  name: apicurio-registry-mt-ui-mt
spec:
  port:
    targetPort: 8080
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: apicurio-registry-mt-ui-mt
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    kubernetes.io/tls-acme: "true"
  labels:
    app: backstage
    template: backstage
  name: backstage
spec:
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: backstage
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    kubernetes.io/tls-acme: "true"
  labels:
    app: fleet-manager
  name: fleet-manager-mt
spec:
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: fleet-manager-mt
    weight: 100
  wildcardPolicy: None
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    kubernetes.io/tls-acme: "true"
  labels:
    app: tenant-manager
    template: tenant-manager
  name: tenant-manager-mt
spec:
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: tenant-manager-mt
    weight: 100
  wildcardPolicy: None
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: registry-e2e-pipeline
spec:
  tasks:
  - name: registry-e2e
    taskRef:
      name: registry-e2e
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: registry-e2e-pipeline-run
spec:
  pipelineRef:
    name: registry-e2e-pipeline
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: registry-e2e
spec:
  steps:
  - env:
    - name: TEST_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: e2e-registry-secret
    - name: TEST_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: e2e-registry-secret
    image: mcr.microsoft.com/playwright:v1.20.0-focal
    name: playwright
    script: |
      #!/bin/sh
      git clone https://github.com/Apicurio/apicurio-registry-e2e-operate-first.git
      cd apicurio-registry-e2e-operate-first
      npm ci
      npx playwright install
      npx playwright test --project chromium
